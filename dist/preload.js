"use strict";var y=Object.defineProperty;var B=(e,t,r)=>t in e?y(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r;var u=(e,t,r)=>(B(e,typeof t!="symbol"?t+"":t,r),r);const O=require("os"),m=require("electron"),$=require("net");function x(e){const t=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(e){for(const r in e)if(r!=="default"){const s=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,s.get?s:{enumerable:!0,get:()=>e[r]})}}return t.default=e,Object.freeze(t)}const w=x(O),l=x($);function b(e){return e.family==="IPv4"&&!e.internal}function j(){const e=w.networkInterfaces(),t=[];for(const r in e){const s=e[r];if(s)for(const c of s)b(c)&&t.push({name:r,address:c.address,family:c.family,percentage:0})}return t}class k{constructor(){u(this,"serversInfo",[]);u(this,"currentServerIndex",0);u(this,"counter",0)}updateInfo(t){this.serversInfo=t,this.currentServerIndex=0,this.counter=0}getNextServer(){const t=Math.min(...this.serversInfo.map(s=>s.percentage)),r=this.serversInfo[this.currentServerIndex];return this.counter+=1,this.counter>=r.percentage/t&&(this.currentServerIndex=(this.currentServerIndex+1)%this.serversInfo.length,this.counter=0),r}}const L=new k,I=l.createServer();let S=[];function o(e){S.push(e)}I.on("connection",e=>{e.on("error",t=>o(t.message)),e.on("end",o),e.on("close",o),e.once("data",t=>{t[0],t[1],e.write(Buffer.from([5,0])),e.once("data",r=>{const s=r[0],c=r[1],g=r[3];let a,f;if(s!==5){o(`Unsupported SOCKS version: ${s}`),e.end();return}if(c!==1){o(`Unsupported command: ${c}`),e.end();return}if(g===1)a=r.slice(4,8).join("."),f=r.readUInt16BE(8);else if(g===3){const n=r[4];a=r.slice(5,5+n).toString(),f=r.readUInt16BE(5+n)}else{o(`Unsupported address type: ${g}`),e.end();return}const i=L.getNextServer();o(`${i.host}:${i.port} -> ${a}:${f}`);const h=l.createServer(n=>{const d=l.connect(f,a);n.pipe(d),d.pipe(n),n.on("error",v=>o(v.message)),d.on("error",v=>o(v.message)),n.on("end",()=>{d.end()}),d.on("end",()=>{n.end()})});h.listen(i.port,i.host);const p=l.connect(i.port,i.host,()=>{const n=Buffer.alloc(r.length);r.copy(n),n[1]=0,e.write(n),e.pipe(p),p.pipe(e)});p.on("end",()=>{e.end(),h.close()}),p.on("error",n=>o(n.message))})})});function U(e){L.updateInfo(e)}function _(e){S=[],I.listen(e,()=>{o(`SOCKS5 server listening on port ${e}...`)})}function M(){I.close(()=>{o("Server stopped")})}function P(){return S}m.contextBridge.exposeInMainWorld("networkInterfaceList",{getAll:()=>j()});m.contextBridge.exposeInMainWorld("socks",{setLoadBalancer:e=>U(e),serverStart:e=>_(e),serverStop:()=>M(),getOutputLog:()=>P()});
